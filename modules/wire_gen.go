// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package modules

import (
	"fmt"
	"github.com/bang9211/ossicones/implements/defaultapiserver"
	"github.com/bang9211/ossicones/implements/defaulthttpserver"
	"github.com/bang9211/ossicones/implements/ossiconesblockchain"
	"github.com/bang9211/ossicones/implements/viperconfig"
	"github.com/bang9211/ossicones/interfaces/apiserver"
	"github.com/bang9211/ossicones/interfaces/blockchain"
	"github.com/bang9211/ossicones/interfaces/config"
	"github.com/bang9211/ossicones/interfaces/httpserver"
	"github.com/google/wire"
	"log"
)

// Injectors from wire.go:

// InitBlockchains injects dependencies and inits of Blockchain.
func InitBlockchain() (blockchain.Blockchain, error) {
	blockchainBlockchain := ossiconesblockchain.GetOrCreate()
	return blockchainBlockchain, nil
}

// InitConfig injects dependencies and inits of Config.
func InitConfig() (config.Config, error) {
	configConfig := viperconfig.NewViperConfig()
	return configConfig, nil
}

// InitHTTPServer injects dependencies and inits of HTTPServer.
func InitHTTPServer(homePath string, config2 config.Config, blockchain2 blockchain.Blockchain) (httpserver.HTTPServer, error) {
	httpServer := defaulthttpserver.GetOrCreate(config2, homePath, blockchain2)
	return httpServer, nil
}

// InitAPIServer injects dependencies and inits of APiServer.
func InitAPIServer(homePath string, config2 config.Config, blockchain2 blockchain.Blockchain) (apiserver.APIServer, error) {
	apiServer := defaultapiserver.GetOrCreate(config2, homePath, blockchain2)
	return apiServer, nil
}

// wire.go:

// TODO : Default set of ossicones
var DefaultSet = wire.NewSet(wire.InterfaceValue(new(blockchain.Blockchain), ossiconesblockchain.GetOrCreate()))

// Init injects dependencies and inits of all modules.
func InitModules(homePath string) {
	fmt.Println("Init Modules")

	bc, err := InitBlockchain()
	if err != nil {
		log.Fatal(err)
	}
	bc.AddBlock("First Block")
	bc.AddBlock("Second Block")
	bc.AddBlock("Thrid Block")
	config2, err := InitConfig()
	if err != nil {
		log.Fatal(err)
	}
	config2.
		Load()

	hs, err := InitHTTPServer(homePath, config2, bc)
	if err != nil {
		log.Fatal(err)
	}
	hs.Serve()

	as, err := InitAPIServer(homePath, config2, bc)
	if err != nil {
		log.Fatal(err)
	}
	as.Serve()

}

// Close closes all modules gracefully.
func Close() {
	fmt.Printf("Closed Modules")
}
