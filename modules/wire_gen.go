// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package modules

import (
	"fmt"
	"github.com/bang9211/ossicones/implements/defaultexplorerserver"
	"github.com/bang9211/ossicones/implements/defaultrestapiserver"
	"github.com/bang9211/ossicones/implements/ossiconesblockchain"
	"github.com/bang9211/ossicones/implements/viperconfig"
	"github.com/bang9211/ossicones/interfaces/blockchain"
	"github.com/bang9211/ossicones/interfaces/config"
	"github.com/bang9211/ossicones/interfaces/explorerserver"
	"github.com/bang9211/ossicones/interfaces/restapiserver"
	"log"
)

// Injectors from wire.go:

// InitBlockchains injects dependencies and inits of Blockchain.
func InitBlockchain(config2 config.Config) (blockchain.Blockchain, error) {
	blockchainBlockchain := ossiconesblockchain.GetOrCreate(config2)
	return blockchainBlockchain, nil
}

// InitConfig injects dependencies and inits of Config.
func InitConfig() (config.Config, error) {
	configConfig := viperconfig.NewViperConfig()
	return configConfig, nil
}

// InitHTTPServer injects dependencies and inits of ExplorerServer.
func InitHTTPServer(homePath string, config2 config.Config, blockchain2 blockchain.Blockchain) (explorerserver.ExplorerServer, error) {
	explorerServer := defaultexplorerserver.GetOrCreate(config2, homePath, blockchain2)
	return explorerServer, nil
}

// InitAPIServer injects dependencies and inits of APiServer.
func InitAPIServer(homePath string, config2 config.Config, blockchain2 blockchain.Blockchain) (restapiserver.RESTAPIServer, error) {
	restapiServer := defaultrestapiserver.GetOrCreate(config2, homePath, blockchain2)
	return restapiServer, nil
}

// wire.go:

// Init injects dependencies and inits of all modules.
func InitModules(homePath string) {
	fmt.Println("Init Modules")
	config2, err := InitConfig()
	if err != nil {
		log.Fatal(err)
	}
	config2.
		Load()

	bc, err := InitBlockchain(config2)
	if err != nil {
		log.Fatal(err)
	}
	bc.AddBlock("First Block")
	bc.AddBlock("Second Block")
	bc.AddBlock("Thrid Block")

	hs, err := InitHTTPServer(homePath, config2, bc)
	if err != nil {
		log.Fatal(err)
	}
	hs.Serve()

	as, err := InitAPIServer(homePath, config2, bc)
	if err != nil {
		log.Fatal(err)
	}
	as.Serve()

}

// Close closes all modules gracefully.
func Close() {
	fmt.Printf("Closed Modules")
}
